// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Receipt Processor
 *
 * A simple receipt processor
 *
 * API version: 1.0.0
 */

package openapi




type Receipt struct {

	// The name of the retailer or store the receipt is from.
	Retailer string `json:"retailer" validate:"regexp=^[\\\\w\\\\s\\\\-&]+$"`

	// The date of the purchase printed on the receipt.
	PurchaseDate string `json:"purchaseDate"`

	// The time of the purchase printed on the receipt. 24-hour time expected.
	PurchaseTime string `json:"purchaseTime"`

	Items []Item `json:"items"`

	// The total amount paid on the receipt.
	Total string `json:"total" validate:"regexp=^\\\\d+\\\\.\\\\d{2}$"`
}

// AssertReceiptRequired checks if the required fields are not zero-ed
func AssertReceiptRequired(obj Receipt) error {
	elements := map[string]interface{}{
		"retailer": obj.Retailer,
		"purchaseDate": obj.PurchaseDate,
		"purchaseTime": obj.PurchaseTime,
		"items": obj.Items,
		"total": obj.Total,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Items {
		if err := AssertItemRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertReceiptConstraints checks if the values respects the defined constraints
func AssertReceiptConstraints(obj Receipt) error {
	for _, el := range obj.Items {
		if err := AssertItemConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
