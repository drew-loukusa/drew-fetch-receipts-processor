// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Receipt Processor
 *
 * A simple receipt processor
 *
 * API version: 1.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) *DefaultAPIController {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"ProcessReceipt": Route{
			strings.ToUpper("Post"),
			"/receipts/process",
			c.ProcessReceipt,
		},
		"GetReceiptPoints": Route{
			strings.ToUpper("Get"),
			"/receipts/{id}/points",
			c.GetReceiptPoints,
		},
	}
}

// ProcessReceipt - Submits a receipt for processing.
func (c *DefaultAPIController) ProcessReceipt(w http.ResponseWriter, r *http.Request) {
	receiptParam := Receipt{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&receiptParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertReceiptRequired(receiptParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertReceiptConstraints(receiptParam); err != nil {
		errorResponse := ImplResponse{Code: 400, Body: err.Error()}
		c.errorHandler(w, r, err, &errorResponse)
		return
	}
	result, err := c.service.ProcessReceipt(r.Context(), receiptParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetReceiptPoints - Returns the points awarded for the receipt.
func (c *DefaultAPIController) GetReceiptPoints(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetReceiptPoints(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
